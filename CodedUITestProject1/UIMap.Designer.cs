// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// PlayStop
        /// </summary>
        public void PlayStop()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(32, 13));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(33, 12));
        }
        
        /// <summary>
        /// TimeStamp - Use 'TimeStampParams' to pass parameters into this method.
        /// </summary>
        public void TimeStamp()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(50, 20));

            // Type 'this is testing ' in 'txtBox' text box
            uITxtBoxEdit.Text = this.TimeStampParams.UITxtBoxEditText;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(46, 10));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(42, 8));
        }
        
        /// <summary>
        /// Play and Add Name from Tools>Pre-DefinedList and then click check box named "Time Stamp with Name". Click Time Stamp
        /// </summary>
        public void TimeStampWithName()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinMenuItem uIAddNameMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIToolsMenuItem.UIPredefinedlistMenuItem.UIAddNameMenuItem;
            WinEdit uITextBoxEdit = this.UIAddnewnameWindow.UITextBoxWindow.UITextBoxEdit;
            WinButton uIOKButton = this.UIAddnewnameWindow.UIOKWindow.UIOKButton;
            WinCheckBox uITimestampwithnameCheckBox = this.UITextPointWindow.UITimestampwithnameWindow.UITimestampwithnameCheckBox;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(47, 9));

            // Click 'Tools' -> 'Predefined list' -> 'Add Name' menu item
            Mouse.Click(uIAddNameMenuItem, new Point(44, 19));

            // Type 'Saad' in 'TextBox' text box
            uITextBoxEdit.Text = this.TimeStampWithNameParams.UITextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(21, 6));

            // Select 'Timestamp with name' check box
            uITimestampwithnameCheckBox.Checked = this.TimeStampWithNameParams.UITimestampwithnameCheckBoxChecked;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(43, 12));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(37, 18));
        }
        
        /// <summary>
        /// BoldItalicUnderlineFontSize - Use 'BoldItalicUnderlineFontSizeParams' to pass parameters into this method.
        /// </summary>
        public void BoldItalicUnderlineFontSize()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WpfToggleButton uIBToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIBToggleButton;
            WpfToggleButton uIIToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIIToggleButton;
            WpfToggleButton uIUToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIUToggleButton;
            WpfComboBox uICmbFontFamilyComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontFamilyComboBox;
            WpfComboBox uICmbFontSizeComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontSizeComboBox;
            #endregion

            // Type 'I love my country' in 'txtBox' text box
            uITxtBoxEdit.Text = this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditText;

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys2, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys3, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys4, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys5, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys6, ModifierKeys.Shift);

            // Set to 'Pressed' state 'B' toggle button
            uIBToggleButton.Pressed = this.BoldItalicUnderlineFontSizeParams.UIBToggleButtonPressed;

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(175, 42));

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys7, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys8, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys9, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.BoldItalicUnderlineFontSizeParams.UITxtBoxEditSendKeys10, ModifierKeys.Shift);

            // Set to 'Pressed' state 'I' toggle button
            uIIToggleButton.Pressed = this.BoldItalicUnderlineFontSizeParams.UIIToggleButtonPressed;

            // Set to 'Pressed' state 'U' toggle button
            uIUToggleButton.Pressed = this.BoldItalicUnderlineFontSizeParams.UIUToggleButtonPressed;

            // Select 'Microsoft Uighur' in 'cmbFontFamily' combo box
            uICmbFontFamilyComboBox.SelectedItem = this.BoldItalicUnderlineFontSizeParams.UICmbFontFamilyComboBoxSelectedItem;

            // Select '22' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.BoldItalicUnderlineFontSizeParams.UICmbFontSizeComboBoxSelectedItem;
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinWindow uITextPointWindow = this.UITextPointWindow;
            #endregion

            // Verify that the 'Name' property of 'TextPoint' window equals 'TextPoint'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextPointWindowName, uITextPointWindow.Name, "failed");
        }
        
        /// <summary>
        /// TextFormatting - Use 'TextFormattingParams' to pass parameters into this method.
        /// </summary>
        public void TextFormatting()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WpfToggleButton uIBToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIBToggleButton;
            WpfToggleButton uIIToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIIToggleButton;
            WpfToggleButton uIUToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIUToggleButton;
            WpfComboBox uICmbFontFamilyComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontFamilyComboBox;
            WpfComboBox uICmbFontSizeComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontSizeComboBox;
            #endregion

            // Type 'I love Pakistan' in 'txtBox' text box
            uITxtBoxEdit.Text = this.TextFormattingParams.UITxtBoxEditText;

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.TextFormattingParams.UITxtBoxEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.TextFormattingParams.UITxtBoxEditSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.TextFormattingParams.UITxtBoxEditSendKeys2, ModifierKeys.Shift);

            // Set to 'Pressed' state 'B' toggle button
            uIBToggleButton.Pressed = this.TextFormattingParams.UIBToggleButtonPressed;

            // Set to 'Pressed' state 'I' toggle button
            uIIToggleButton.Pressed = this.TextFormattingParams.UIIToggleButtonPressed;

            // Set to 'Pressed' state 'U' toggle button
            uIUToggleButton.Pressed = this.TextFormattingParams.UIUToggleButtonPressed;

            // Select 'Microsoft YaHei' in 'cmbFontFamily' combo box
            uICmbFontFamilyComboBox.SelectedItem = this.TextFormattingParams.UICmbFontFamilyComboBoxSelectedItem;

            // Select '24' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.TextFormattingParams.UICmbFontSizeComboBoxSelectedItem;
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITxtBoxEditControlType, uITxtBoxEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITxtBoxEditControlType1, uITxtBoxEdit.ControlType.ToString());

            // Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITxtBoxEditControlType2, uITxtBoxEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// PlayFile - Use 'PlayFileParams' to pass parameters into this method.
        /// </summary>
        public void PlayFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uISWEButton = this.UITrayInputIndicatorWindow.UIItemWindow.UISWEButton;
            WinText uIUnitedKingdomkeyboarText = this.UIItemWindow.UIEnglishUnitedKingdomButton.UIUnitedKingdomkeyboarText;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(37, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(88, 7));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(51, 16));

            // Type 'Please type' in 'txtBox' text box
            uITxtBoxEdit.Text = this.PlayFileParams.UITxtBoxEditText;

            // Click 'SWE' button
            Mouse.Click(uISWEButton, new Point(14, 27));

            // Click 'United Kingdom keyboard' label
            Mouse.Click(uIUnitedKingdomkeyboarText, new Point(84, 17));

            // Type 'Please type whatever he is speaking.' in 'txtBox' text box
            uITxtBoxEdit.Text = this.PlayFileParams.UITxtBoxEditText1;
        }
        
        /// <summary>
        /// PlayPause
        /// </summary>
        public void PlayPause()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(33, 18));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(46, 12));
        }
        
        /// <summary>
        /// PlayTimeStamp
        /// </summary>
        public void PlayTimeStamp()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(36, 22));

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(41, 15));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(39, 15));
        }
        
        /// <summary>
        /// PlayRepeat - Use 'PlayRepeatParams' to pass parameters into this method.
        /// </summary>
        public void PlayRepeat()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinEdit uITxtBoxUserSecEdit = this.UITextPointWindow.UITxtBoxUserSecWindow.UITxtBoxUserSecEdit;
            WinButton uIRepeatButton = this.UITextPointWindow.UIRepeatWindow.UIRepeatButton;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(39, 12));

            // Type '5' in 'txtBoxUserSec' text box
            uITxtBoxUserSecEdit.Text = this.PlayRepeatParams.UITxtBoxUserSecEditText;

            // Click 'Repeat' button
            Mouse.Click(uIRepeatButton, new Point(29, 15));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(37, 12));
        }
        
        /// <summary>
        /// PlayAddName - Use 'PlayAddNameParams' to pass parameters into this method.
        /// </summary>
        public void PlayAddName()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIAddLabelButton = this.UITextPointWindow.UIAddLabelWindow.UIAddLabelButton;
            WinMenuItem uIEditMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem;
            WinMenuItem uIAddNameMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIToolsMenuItem.UIPredefinedlistMenuItem.UIAddNameMenuItem;
            WinEdit uITextBoxEdit = this.UIAddnewnameWindow.UITextBoxWindow.UITextBoxEdit;
            WinButton uIOKButton = this.UIAddnewnameWindow.UIOKWindow.UIOKButton;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Type the following paragraph in 'txtBox' text box 
            //'Please type whatever he is speaking.(00:05) 
            //This is second Line.'
            uITxtBoxEdit.Text = this.PlayAddNameParams.UITxtBoxEditText;

            // Click 'Add Label' button
            Mouse.Click(uIAddLabelButton, new Point(30, 11));

            // Click 'Edit' menu item
            Mouse.Click(uIEditMenuItem, new Point(21, 6));

            // Click 'Tools' -> 'Predefined list' -> 'Add Name' menu item
            Mouse.Click(uIAddNameMenuItem, new Point(41, 12));

            // Type 'Saad' in 'TextBox' text box
            uITextBoxEdit.Text = this.PlayAddNameParams.UITextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 9));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(48, 7));
        }
        
        /// <summary>
        /// TimeStampName - Use 'TimeStampNameParams' to pass parameters into this method.
        /// </summary>
        public void TimeStampName()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinMenuItem uIAddNameMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIToolsMenuItem.UIPredefinedlistMenuItem.UIAddNameMenuItem;
            WinEdit uITextBoxEdit = this.UIAddnewnameWindow.UITextBoxWindow.UITextBoxEdit;
            WinButton uIOKButton = this.UIAddnewnameWindow.UIOKWindow.UIOKButton;
            WinComboBox uIComboBox_ListOfNamesComboBox = this.UITextPointWindow.UIComboBox_ListOfNamesWindow.UIComboBox_ListOfNamesComboBox;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            WinCheckBox uITimestampwithnameCheckBox = this.UITextPointWindow.UITimestampwithnameWindow.UITimestampwithnameCheckBox;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(47, 3));

            // Click 'Tools' -> 'Predefined list' -> 'Add Name' menu item
            Mouse.Click(uIAddNameMenuItem, new Point(88, 6));

            // Type 'Dehmitris' in 'TextBox' text box
            uITextBoxEdit.Text = this.TimeStampNameParams.UITextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 10));

            // Select 'Dehmitris' in 'comboBox_ListOfNames' combo box
            uIComboBox_ListOfNamesComboBox.SelectedItem = this.TimeStampNameParams.UIComboBox_ListOfNamesComboBoxSelectedItem;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(29, 11));

            // Select 'Timestamp with name' check box
            uITimestampwithnameCheckBox.Checked = this.TimeStampNameParams.UITimestampwithnameCheckBoxChecked;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(46, 18));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(32, 14));
        }
        
        /// <summary>
        /// NewFileTmeStampName - Use 'NewFileTmeStampNameParams' to pass parameters into this method.
        /// </summary>
        public void NewFileTmeStampName()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample4mp3ListItem.UINameEdit;
            WinList uIListBox1List = this.UITextPointWindow.UIListBox1Window.UIListBox1List;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(29, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(85, 7));

            // Select 'audio-sample-4' in 'listBox1' list box
            uIListBox1List.SelectedItemsAsString = this.NewFileTmeStampNameParams.UIListBox1ListSelectedItemsAsString;

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(36, 11));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(44, 12));

            // Select 'audio-sample-1' in 'listBox1' list box
            uIListBox1List.SelectedItemsAsString = this.NewFileTmeStampNameParams.UIListBox1ListSelectedItemsAsString1;

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(40, 14));

            // Type the following paragraph in 'txtBox' text box 
            //'Please type whatever he is speaking.(00:05) 
            //This is second Line.(00:01)  Dehmitris: (00:01) 
            //
            //This another line'
            uITxtBoxEdit.Text = this.NewFileTmeStampNameParams.UITxtBoxEditText;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(34, 16));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(49, 10));
        }
        
        /// <summary>
        /// SaveFile - Use 'SaveFileParams' to pass parameters into this method.
        /// </summary>
        public void SaveFile()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WpfToggleButton uIBToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIBToggleButton;
            WpfToggleButton uIIToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIIToggleButton;
            WpfToggleButton uIUToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIUToggleButton;
            WpfComboBox uICmbFontFamilyComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontFamilyComboBox;
            WpfComboBox uICmbFontSizeComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontSizeComboBox;
            WinMenuItem uISaveMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Move 'txtBox' text box
            Mouse.StartDragging(uITxtBoxEdit, new Point(25, 18));
            Mouse.StopDragging(uITxtBoxEdit, 193, 87);

            // Set to 'Pressed' state 'B' toggle button
            uIBToggleButton.Pressed = this.SaveFileParams.UIBToggleButtonPressed;

            // Set to 'Pressed' state 'I' toggle button
            uIIToggleButton.Pressed = this.SaveFileParams.UIIToggleButtonPressed;

            // Set to 'Pressed' state 'U' toggle button
            uIUToggleButton.Pressed = this.SaveFileParams.UIUToggleButtonPressed;

            // Select 'MingLiU' in 'cmbFontFamily' combo box
            uICmbFontFamilyComboBox.SelectedItem = this.SaveFileParams.UICmbFontFamilyComboBoxSelectedItem;

            // Select '24' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.SaveFileParams.UICmbFontSizeComboBoxSelectedItem;

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(32, 7));

            // Select 'testfile' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveFileParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(61, 11));

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(598, 188));
        }
        
        /// <summary>
        /// OpenSavedFile
        /// </summary>
        public void OpenSavedFile()
        {
            #region Variable Declarations
            WinMenuBar uIMenuStrip1MenuBar = this.UITextPointWindow.UIFileWindow.UIMenuStrip1MenuBar;
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestfilertfListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Move 'menuStrip1' menu bar
            Mouse.StartDragging(uIMenuStrip1MenuBar, new Point(26, 22));
            Mouse.StopDragging(uIMenuStrip1MenuBar, -1, -8);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(96, 13));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(75, 17));
        }
        
        /// <summary>
        /// CutPaste - Use 'CutPasteParams' to pass parameters into this method.
        /// </summary>
        public void CutPaste()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinMenuItem uIToolsMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIToolsMenuItem;
            WinMenuItem uICutCtrlXMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICutCtrlXMenuItem;
            WinMenuItem uIPasteCtrlVMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteCtrlVMenuItem;
            WinMenuItem uISaveMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow.UITestfilertfListItem.UINameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Move 'txtBox' text box
            Mouse.StartDragging(uITxtBoxEdit, new Point(89, 20));
            Mouse.StopDragging(uITxtBoxEdit, 505, 37);

            // Click 'Tools' menu item
            Mouse.Click(uIToolsMenuItem, new Point(35, 15));

            // Click 'Edit' -> 'Cut (Ctrl + X)' menu item
            Mouse.Click(uICutCtrlXMenuItem, new Point(40, 9));

            // Type the following paragraph in 'txtBox' text box 
            //'This another line(00:24)  Dehmitris: 
            //'
            uITxtBoxEdit.Text = this.CutPasteParams.UITxtBoxEditText;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(37, 9));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(37, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(53, 5));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(53, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 11));
        }
        
        /// <summary>
        /// CopyPaste - Use 'CopyPasteParams' to pass parameters into this method.
        /// </summary>
        public void CopyPaste()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinMenuItem uICopyCtrlCMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICopyCtrlCMenuItem;
            WinMenuItem uIPasteCtrlVMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteCtrlVMenuItem;
            #endregion

            // Move 'txtBox' text box
            Mouse.StartDragging(uITxtBoxEdit, new Point(12, 23));
            Mouse.StopDragging(uITxtBoxEdit, 620, 54);

            // Click 'Edit' -> 'Copy (Ctrl + C)' menu item
            Mouse.Click(uICopyCtrlCMenuItem, new Point(42, 10));

            // Type the following paragraph in 'txtBox' text box 
            //'This another line(00:24)  Dehmitris: 
            //Please type whatever he is speaking.(00:05) 
            //This is second Line.(00:01)  Dehmitris: (00:01)
            //'
            uITxtBoxEdit.Text = this.CopyPasteParams.UITxtBoxEditText;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(48, 10));
        }
        
        /// <summary>
        /// PlayBackRate - Use 'PlayBackRateParams' to pass parameters into this method.
        /// </summary>
        public void PlayBackRate()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinSlider uITrackBar_PlayBackRatSlider = this.UITextPointWindow.UITrackBar_PlayBackRatWindow.UITrackBar_PlayBackRatSlider;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(31, 18));

            // Set position '4' in 'trackBar_PlayBackRate' slider
            uITrackBar_PlayBackRatSlider.PositionAsString = this.PlayBackRateParams.UITrackBar_PlayBackRatSliderPositionAsString;
        }
        
        /// <summary>
        /// FileOpenPlay - Use 'FileOpenPlayParams' to pass parameters into this method.
        /// </summary>
        public void FileOpenPlay()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinControl uIStopF5HelpBalloon = this.UIItemWindow1.UIStopF5HelpBalloon;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(30, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(65, 6));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(47, 9));

            // Type 'I am typing test' in 'txtBox' text box
            uITxtBoxEdit.Text = this.FileOpenPlayParams.UITxtBoxEditText;

            // Click 'Stop (F5)' HelpBalloon
            Mouse.Click(uIStopF5HelpBalloon, new Point(16, 39));
        }
        
        /// <summary>
        /// OpenPlay - Use 'OpenPlayParams' to pass parameters into this method.
        /// </summary>
        public void OpenPlay()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinClient uITextPointClient = this.UITextPointWindow.UITextPointClient;
            WpfToggleButton uIBToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIBToggleButton;
            WpfToggleButton uIIToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIIToggleButton;
            WpfToggleButton uIUToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIUToggleButton;
            WpfComboBox uICmbFontFamilyComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontFamilyComboBox;
            WpfListItem uIMingLiUListItem = this.UIWpfWindow.UIMingLiUListItem;
            WpfComboBox uICmbFontSizeComboBox = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontSizeComboBox;
            WinControl uIChromeLegacyWindowDocument = this.UIWI1514533ovRLChase7JWindow.UIChromeLegacyWindowWindow.UIChromeLegacyWindowDocument;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(33, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(71, 15));

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(229, 79));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(42, 9));

            // Type 'This is test 1' in 'txtBox' text box
            uITxtBoxEdit.Text = this.OpenPlayParams.UITxtBoxEditText;

            // Move 'txtBox' text box to 'TextPoint' client
            uITextPointClient.EnsureClickable(new Point(7, 70));
            Mouse.StartDragging(uITxtBoxEdit, new Point(114, 20));
            Mouse.StopDragging(uITextPointClient, new Point(7, 70));

            // Set to 'Pressed' state 'B' toggle button
            uIBToggleButton.Pressed = this.OpenPlayParams.UIBToggleButtonPressed;

            // Set to 'Pressed' state 'I' toggle button
            uIIToggleButton.Pressed = this.OpenPlayParams.UIIToggleButtonPressed;

            // Set to 'Pressed' state 'U' toggle button
            uIUToggleButton.Pressed = this.OpenPlayParams.UIUToggleButtonPressed;

            // Click 'cmbFontFamily' combo box
            Mouse.Click(uICmbFontFamilyComboBox, new Point(145, 11));

            // Click 'MingLiU' list item
            Mouse.Click(uIMingLiUListItem, new Point(98, 9));

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(185, 103));

            // Select '18' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.OpenPlayParams.UICmbFontSizeComboBoxSelectedItem;

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(240, 132));

            // Move 'txtBox' text box to 'Chrome Legacy Window' document
            uIChromeLegacyWindowDocument.EnsureClickable(new Point(220, 161));
            Mouse.StartDragging(uITxtBoxEdit, new Point(92, 10));
            Mouse.StopDragging(uIChromeLegacyWindowDocument, new Point(220, 161));

            // Select '22' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.OpenPlayParams.UICmbFontSizeComboBoxSelectedItem1;

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(37, 13));
        }
        
        /// <summary>
        /// PlayStopFile - Use 'PlayStopFileParams' to pass parameters into this method.
        /// </summary>
        public void PlayStopFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(30, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(72, 16));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(39, 21));

            // Type 'This test sample' in 'txtBox' text box
            uITxtBoxEdit.Text = this.PlayStopFileParams.UITxtBoxEditText;

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(27, 11));
        }
        
        /// <summary>
        /// BoldItalicUnderline - Use 'BoldItalicUnderlineParams' to pass parameters into this method.
        /// </summary>
        public void BoldItalicUnderline()
        {
            #region Variable Declarations
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WpfToggleButton uIBToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIBToggleButton;
            WpfToggleButton uIIToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIIToggleButton;
            WpfToggleButton uIUToggleButton = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UIUToggleButton;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Move 'txtBox' text box
            Mouse.StartDragging(uITxtBoxEdit, new Point(91, 17));
            Mouse.StopDragging(uITxtBoxEdit, -79, -3);

            // Set to 'Pressed' state 'B' toggle button
            uIBToggleButton.Pressed = this.BoldItalicUnderlineParams.UIBToggleButtonPressed;

            // Set to 'Pressed' state 'I' toggle button
            uIIToggleButton.Pressed = this.BoldItalicUnderlineParams.UIIToggleButtonPressed;

            // Set to 'Pressed' state 'U' toggle button
            uIUToggleButton.Pressed = this.BoldItalicUnderlineParams.UIUToggleButtonPressed;

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(50, 10));
        }
        
        /// <summary>
        /// TmeStamp - Use 'TmeStampParams' to pass parameters into this method.
        /// </summary>
        public void TmeStamp()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample4mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uITimestampButton = this.UITextPointWindow.UITimestampWindow.UITimestampButton;
            WinMenuBar uIMenuStrip1MenuBar = this.UITextPointWindow.UIFileWindow.UIMenuStrip1MenuBar;
            WinMenuItem uIAddNameMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIToolsMenuItem.UIPredefinedlistMenuItem.UIAddNameMenuItem;
            WinEdit uITextBoxEdit = this.UIAddnewnameWindow.UITextBoxWindow.UITextBoxEdit;
            WinButton uIOKButton = this.UIAddnewnameWindow.UIOKWindow.UIOKButton;
            WinCheckBox uITimestampwithnameCheckBox = this.UITextPointWindow.UITimestampwithnameWindow.UITimestampwithnameCheckBox;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(29, 12));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(112, 3));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(47, 8));

            // Type 'This is second test ' in 'txtBox' text box
            uITxtBoxEdit.Text = this.TmeStampParams.UITxtBoxEditText;

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(37, 12));

            // Type the following paragraph in 'txtBox' text box 
            //'This is second test (00:12) 
            //this second line '
            uITxtBoxEdit.Text = this.TmeStampParams.UITxtBoxEditText1;

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(57, 0));

            // Click 'Tools' -> 'Predefined list' -> 'Add Name' menu item
            Mouse.Click(uIAddNameMenuItem, new Point(72, 10));

            // Type 'Saad' in 'TextBox' text box
            uITextBoxEdit.Text = this.TmeStampParams.UITextBoxEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 7));

            // Select 'Timestamp with name' check box
            uITimestampwithnameCheckBox.Checked = this.TmeStampParams.UITimestampwithnameCheckBoxChecked;

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(204, 37));

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(204, 37));

            // Click 'Timestamp' button
            Mouse.Click(uITimestampButton, new Point(37, 15));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(30, 12));
        }
        
        /// <summary>
        /// FontSize - Use 'FontSizeParams' to pass parameters into this method.
        /// </summary>
        public void FontSize()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinClient uITextPointClient = this.UITextPointWindow.UITextPointClient;
            WpfComboBox uICmbFontFamilyComboBox = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontFamilyComboBox;
            WpfComboBox uICmbFontSizeComboBox = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UIMainToolBarToolBar.UICmbFontSizeComboBox;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(24, 4));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(90, 5));

            // Type the following paragraph in 'txtBox' text box 
            //'this is another test
            //'
            uITxtBoxEdit.Text = this.FontSizeParams.UITxtBoxEditText;

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(24, 10));

            // Move 'txtBox' text box to 'TextPoint' client
            uITextPointClient.EnsureClickable(new Point(4, 64));
            Mouse.StartDragging(uITxtBoxEdit, new Point(75, 6));
            Mouse.StopDragging(uITextPointClient, new Point(4, 64));

            // Select 'Miriam' in 'cmbFontFamily' combo box
            uICmbFontFamilyComboBox.SelectedItem = this.FontSizeParams.UICmbFontFamilyComboBoxSelectedItem;

            // Select '24' in 'cmbFontSize' combo box
            uICmbFontSizeComboBox.SelectedItem = this.FontSizeParams.UICmbFontSizeComboBoxSelectedItem;

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(46, 14));
        }
        
        /// <summary>
        /// PlaBackRateRepeat - Use 'PlaBackRateRepeatParams' to pass parameters into this method.
        /// </summary>
        public void PlaBackRateRepeat()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WinSlider uITrackBar_PlayBackRatSlider = this.UITextPointWindow.UITrackBar_PlayBackRatWindow.UITrackBar_PlayBackRatSlider;
            WinEdit uITxtBoxUserSecEdit = this.UITextPointWindow.UITxtBoxUserSecWindow.UITxtBoxUserSecEdit;
            WinButton uIRepeatButton = this.UITextPointWindow.UIRepeatWindow.UIRepeatButton;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(30, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(85, 11));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(54, 10));

            // Set position '1.97' in 'trackBar_PlayBackRate' slider
            uITrackBar_PlayBackRatSlider.PositionAsString = this.PlaBackRateRepeatParams.UITrackBar_PlayBackRatSliderPositionAsString;

            // Type '5' in 'txtBoxUserSec' text box
            uITxtBoxUserSecEdit.Text = this.PlaBackRateRepeatParams.UITxtBoxUserSecEditText;

            // Click 'Repeat' button
            Mouse.Click(uIRepeatButton, new Point(34, 11));

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(44, 13));
        }
        
        /// <summary>
        /// CutCopyPaste - Use 'CutCopyPasteParams' to pass parameters into this method.
        /// </summary>
        public void CutCopyPaste()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinControl uIPlayF2HelpBalloon = this.UIItemWindow2.UIPlayF2HelpBalloon;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(29, 1));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(41, 11));

            // Click 'Play (F2)' HelpBalloon
            Mouse.Click(uIPlayF2HelpBalloon, new Point(17, 35));

            // Type the following paragraph in 'txtBox' text box 
            //'This is new test of cut copy pate
            //
            //This is new test of cut copy pate'
            //This is new test of cut copy pateThis is new test of cut copy pate'
            uITxtBoxEdit.Text = this.CutCopyPasteParams.UITxtBoxEditText;

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(55, 10));
        }
        
        /// <summary>
        /// CopyPasteCut - Use 'CopyPasteCutParams' to pass parameters into this method.
        /// </summary>
        public void CopyPasteCut()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinButton uIStopButton = this.UITextPointWindow.UIStopWindow.UIStopButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(29, 5));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(51, 14));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(51, 10));

            // Type the following paragraph in 'txtBox' text box 
            //'This is cut copy paste test   This is cut copy paste test 
            //
            //This is cut copy paste test  This is cut copy paste test '
            uITxtBoxEdit.Text = this.CopyPasteCutParams.UITxtBoxEditText;

            // Click 'Stop' button
            Mouse.Click(uIStopButton, new Point(19, 14));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinClient uIChromeLegacyWindowClient = this.UIYahooGoogleChromeWindow.UIChromeLegacyWindowWindow.UIChromeLegacyWindowClient;
            WinMenuItem uICopyCtrlCMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICopyCtrlCMenuItem;
            WinMenuItem uIPasteCtrlVMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteCtrlVMenuItem;
            WinMenuItem uICutCtrlXMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICutCtrlXMenuItem;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(44, 17));

            // Move 'txtBox' text box to 'Chrome Legacy Window' client
            uIChromeLegacyWindowClient.EnsureClickable(new Point(35, 79));
            Mouse.StartDragging(uITxtBoxEdit, new Point(255, 63));
            Mouse.StopDragging(uIChromeLegacyWindowClient, new Point(35, 79));

            // Click 'Edit' -> 'Copy (Ctrl + C)' menu item
            Mouse.Click(uICopyCtrlCMenuItem, new Point(43, 9));

            // Type the following paragraph in 'txtBox' text box 
            //'This is cut copy paste test   This is cut copy paste test 
            //
            //This is cut copy paste test  This is cut copy paste test 
            //'
            uITxtBoxEdit.Text = this.RecordedMethod1Params.UITxtBoxEditText;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(43, 7));

            // Type the following paragraph in 'txtBox' text box 
            //'This is cut copy paste test   This is cut copy paste test 
            //
            //This is cut copy paste test  This is cut copy paste test 
            //This is cut copy paste test  This is cut copy paste test 
            //'
            uITxtBoxEdit.Text = this.RecordedMethod1Params.UITxtBoxEditText1;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(50, 16));

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod1Params.UITxtBoxEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod1Params.UITxtBoxEditSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod1Params.UITxtBoxEditSendKeys2, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod1Params.UITxtBoxEditSendKeys3, ModifierKeys.Shift);

            // Click 'Edit' -> 'Cut (Ctrl + X)' menu item
            Mouse.Click(uICutCtrlXMenuItem, new Point(29, 13));

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(108, 36));

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(41, 7));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(53, 12));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIAudiosample1mp3ListItem.UINameEdit;
            WinButton uIPlayButton = this.UITextPointWindow.UIPlayWindow.UIPlayButton;
            WpfEdit uITxtBoxEdit = this.UITextPointWindow.UIElementHost1Window.UIElementHost1Client.UIElementHost1Pane.UIItemCustom.UITxtBoxEdit;
            WinMenuItem uICutCtrlXMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICutCtrlXMenuItem;
            WinMenuItem uIPasteCtrlVMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UIPasteCtrlVMenuItem;
            WinMenuItem uICopyCtrlCMenuItem = this.UITextPointWindow.UIMenuStrip1MenuBar.UIEditMenuItem.UICopyCtrlCMenuItem;
            WinButton uIPauseButton = this.UITextPointWindow.UIPauseWindow.UIPauseButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(25, 7));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(95, 15));

            // Click 'Play' button
            Mouse.Click(uIPlayButton, new Point(26, 9));

            // Type 'This is cut copy test' in 'txtBox' text box
            uITxtBoxEdit.Text = this.RecordedMethod2Params.UITxtBoxEditText;

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys1, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys2, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys3, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys4, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys5, ModifierKeys.Shift);

            // Click 'txtBox' text box
            Mouse.Click(uITxtBoxEdit, new Point(162, 41));

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys6, ModifierKeys.Shift);

            // Type 'Shift + {Down}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys7, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys8, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys9, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys10, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys11, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys12, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys13, ModifierKeys.Shift);

            // Click 'Edit' -> 'Cut (Ctrl + X)' menu item
            Mouse.Click(uICutCtrlXMenuItem, new Point(32, 9));

            // Type 'This is cut copy     ' in 'txtBox' text box
            uITxtBoxEdit.Text = this.RecordedMethod2Params.UITxtBoxEditText1;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(42, 5));

            // Type 'This is cut copy      test   ' in 'txtBox' text box
            uITxtBoxEdit.Text = this.RecordedMethod2Params.UITxtBoxEditText2;

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys14, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys15, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys16, ModifierKeys.Shift);

            // Type 'Shift + {Left}' in 'txtBox' text box
            Keyboard.SendKeys(uITxtBoxEdit, this.RecordedMethod2Params.UITxtBoxEditSendKeys17, ModifierKeys.Shift);

            // Click 'Edit' -> 'Copy (Ctrl + C)' menu item
            Mouse.Click(uICopyCtrlCMenuItem, new Point(45, 4));

            // Type 'This is cut copy      test                               ' in 'txtBox' text box
            uITxtBoxEdit.Text = this.RecordedMethod2Params.UITxtBoxEditText3;

            // Click 'Edit' -> 'Paste (Ctrl + V)' menu item
            Mouse.Click(uIPasteCtrlVMenuItem, new Point(46, 11));

            // Click 'Pause' button
            Mouse.Click(uIPauseButton, new Point(44, 9));
        }
        
        #region Properties
        public virtual TimeStampParams TimeStampParams
        {
            get
            {
                if ((this.mTimeStampParams == null))
                {
                    this.mTimeStampParams = new TimeStampParams();
                }
                return this.mTimeStampParams;
            }
        }
        
        public virtual TimeStampWithNameParams TimeStampWithNameParams
        {
            get
            {
                if ((this.mTimeStampWithNameParams == null))
                {
                    this.mTimeStampWithNameParams = new TimeStampWithNameParams();
                }
                return this.mTimeStampWithNameParams;
            }
        }
        
        public virtual BoldItalicUnderlineFontSizeParams BoldItalicUnderlineFontSizeParams
        {
            get
            {
                if ((this.mBoldItalicUnderlineFontSizeParams == null))
                {
                    this.mBoldItalicUnderlineFontSizeParams = new BoldItalicUnderlineFontSizeParams();
                }
                return this.mBoldItalicUnderlineFontSizeParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual TextFormattingParams TextFormattingParams
        {
            get
            {
                if ((this.mTextFormattingParams == null))
                {
                    this.mTextFormattingParams = new TextFormattingParams();
                }
                return this.mTextFormattingParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual PlayFileParams PlayFileParams
        {
            get
            {
                if ((this.mPlayFileParams == null))
                {
                    this.mPlayFileParams = new PlayFileParams();
                }
                return this.mPlayFileParams;
            }
        }
        
        public virtual PlayRepeatParams PlayRepeatParams
        {
            get
            {
                if ((this.mPlayRepeatParams == null))
                {
                    this.mPlayRepeatParams = new PlayRepeatParams();
                }
                return this.mPlayRepeatParams;
            }
        }
        
        public virtual PlayAddNameParams PlayAddNameParams
        {
            get
            {
                if ((this.mPlayAddNameParams == null))
                {
                    this.mPlayAddNameParams = new PlayAddNameParams();
                }
                return this.mPlayAddNameParams;
            }
        }
        
        public virtual TimeStampNameParams TimeStampNameParams
        {
            get
            {
                if ((this.mTimeStampNameParams == null))
                {
                    this.mTimeStampNameParams = new TimeStampNameParams();
                }
                return this.mTimeStampNameParams;
            }
        }
        
        public virtual NewFileTmeStampNameParams NewFileTmeStampNameParams
        {
            get
            {
                if ((this.mNewFileTmeStampNameParams == null))
                {
                    this.mNewFileTmeStampNameParams = new NewFileTmeStampNameParams();
                }
                return this.mNewFileTmeStampNameParams;
            }
        }
        
        public virtual SaveFileParams SaveFileParams
        {
            get
            {
                if ((this.mSaveFileParams == null))
                {
                    this.mSaveFileParams = new SaveFileParams();
                }
                return this.mSaveFileParams;
            }
        }
        
        public virtual CutPasteParams CutPasteParams
        {
            get
            {
                if ((this.mCutPasteParams == null))
                {
                    this.mCutPasteParams = new CutPasteParams();
                }
                return this.mCutPasteParams;
            }
        }
        
        public virtual CopyPasteParams CopyPasteParams
        {
            get
            {
                if ((this.mCopyPasteParams == null))
                {
                    this.mCopyPasteParams = new CopyPasteParams();
                }
                return this.mCopyPasteParams;
            }
        }
        
        public virtual PlayBackRateParams PlayBackRateParams
        {
            get
            {
                if ((this.mPlayBackRateParams == null))
                {
                    this.mPlayBackRateParams = new PlayBackRateParams();
                }
                return this.mPlayBackRateParams;
            }
        }
        
        public virtual FileOpenPlayParams FileOpenPlayParams
        {
            get
            {
                if ((this.mFileOpenPlayParams == null))
                {
                    this.mFileOpenPlayParams = new FileOpenPlayParams();
                }
                return this.mFileOpenPlayParams;
            }
        }
        
        public virtual OpenPlayParams OpenPlayParams
        {
            get
            {
                if ((this.mOpenPlayParams == null))
                {
                    this.mOpenPlayParams = new OpenPlayParams();
                }
                return this.mOpenPlayParams;
            }
        }
        
        public virtual PlayStopFileParams PlayStopFileParams
        {
            get
            {
                if ((this.mPlayStopFileParams == null))
                {
                    this.mPlayStopFileParams = new PlayStopFileParams();
                }
                return this.mPlayStopFileParams;
            }
        }
        
        public virtual BoldItalicUnderlineParams BoldItalicUnderlineParams
        {
            get
            {
                if ((this.mBoldItalicUnderlineParams == null))
                {
                    this.mBoldItalicUnderlineParams = new BoldItalicUnderlineParams();
                }
                return this.mBoldItalicUnderlineParams;
            }
        }
        
        public virtual TmeStampParams TmeStampParams
        {
            get
            {
                if ((this.mTmeStampParams == null))
                {
                    this.mTmeStampParams = new TmeStampParams();
                }
                return this.mTmeStampParams;
            }
        }
        
        public virtual FontSizeParams FontSizeParams
        {
            get
            {
                if ((this.mFontSizeParams == null))
                {
                    this.mFontSizeParams = new FontSizeParams();
                }
                return this.mFontSizeParams;
            }
        }
        
        public virtual PlaBackRateRepeatParams PlaBackRateRepeatParams
        {
            get
            {
                if ((this.mPlaBackRateRepeatParams == null))
                {
                    this.mPlaBackRateRepeatParams = new PlaBackRateRepeatParams();
                }
                return this.mPlaBackRateRepeatParams;
            }
        }
        
        public virtual CutCopyPasteParams CutCopyPasteParams
        {
            get
            {
                if ((this.mCutCopyPasteParams == null))
                {
                    this.mCutCopyPasteParams = new CutCopyPasteParams();
                }
                return this.mCutCopyPasteParams;
            }
        }
        
        public virtual CopyPasteCutParams CopyPasteCutParams
        {
            get
            {
                if ((this.mCopyPasteCutParams == null))
                {
                    this.mCopyPasteCutParams = new CopyPasteCutParams();
                }
                return this.mCopyPasteCutParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public UITextPointWindow UITextPointWindow
        {
            get
            {
                if ((this.mUITextPointWindow == null))
                {
                    this.mUITextPointWindow = new UITextPointWindow();
                }
                return this.mUITextPointWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIAddnewnameWindow UIAddnewnameWindow
        {
            get
            {
                if ((this.mUIAddnewnameWindow == null))
                {
                    this.mUIAddnewnameWindow = new UIAddnewnameWindow();
                }
                return this.mUIAddnewnameWindow;
            }
        }
        
        public UITrayInputIndicatorWindow UITrayInputIndicatorWindow
        {
            get
            {
                if ((this.mUITrayInputIndicatorWindow == null))
                {
                    this.mUITrayInputIndicatorWindow = new UITrayInputIndicatorWindow();
                }
                return this.mUITrayInputIndicatorWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public UIWI1514533ovRLChase7JWindow UIWI1514533ovRLChase7JWindow
        {
            get
            {
                if ((this.mUIWI1514533ovRLChase7JWindow == null))
                {
                    this.mUIWI1514533ovRLChase7JWindow = new UIWI1514533ovRLChase7JWindow();
                }
                return this.mUIWI1514533ovRLChase7JWindow;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIYahooGoogleChromeWindow UIYahooGoogleChromeWindow
        {
            get
            {
                if ((this.mUIYahooGoogleChromeWindow == null))
                {
                    this.mUIYahooGoogleChromeWindow = new UIYahooGoogleChromeWindow();
                }
                return this.mUIYahooGoogleChromeWindow;
            }
        }
        #endregion
        
        #region Fields
        private TimeStampParams mTimeStampParams;
        
        private TimeStampWithNameParams mTimeStampWithNameParams;
        
        private BoldItalicUnderlineFontSizeParams mBoldItalicUnderlineFontSizeParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private TextFormattingParams mTextFormattingParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private PlayFileParams mPlayFileParams;
        
        private PlayRepeatParams mPlayRepeatParams;
        
        private PlayAddNameParams mPlayAddNameParams;
        
        private TimeStampNameParams mTimeStampNameParams;
        
        private NewFileTmeStampNameParams mNewFileTmeStampNameParams;
        
        private SaveFileParams mSaveFileParams;
        
        private CutPasteParams mCutPasteParams;
        
        private CopyPasteParams mCopyPasteParams;
        
        private PlayBackRateParams mPlayBackRateParams;
        
        private FileOpenPlayParams mFileOpenPlayParams;
        
        private OpenPlayParams mOpenPlayParams;
        
        private PlayStopFileParams mPlayStopFileParams;
        
        private BoldItalicUnderlineParams mBoldItalicUnderlineParams;
        
        private TmeStampParams mTmeStampParams;
        
        private FontSizeParams mFontSizeParams;
        
        private PlaBackRateRepeatParams mPlaBackRateRepeatParams;
        
        private CutCopyPasteParams mCutCopyPasteParams;
        
        private CopyPasteCutParams mCopyPasteCutParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private UITextPointWindow mUITextPointWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIAddnewnameWindow mUIAddnewnameWindow;
        
        private UITrayInputIndicatorWindow mUITrayInputIndicatorWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIWpfWindow mUIWpfWindow;
        
        private UIWI1514533ovRLChase7JWindow mUIWI1514533ovRLChase7JWindow;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIYahooGoogleChromeWindow mUIYahooGoogleChromeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TimeStamp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeStampParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'this is testing ' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "this is testing ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TimeStampWithName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeStampWithNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Saad' in 'TextBox' text box
        /// </summary>
        public string UITextBoxEditText = "Saad";
        
        /// <summary>
        /// Select 'Timestamp with name' check box
        /// </summary>
        public bool UITimestampwithnameCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BoldItalicUnderlineFontSize'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BoldItalicUnderlineFontSizeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'I love my country' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "I love my country";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys1 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys2 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys3 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys4 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys5 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys6 = "{Left}";
        
        /// <summary>
        /// Set to 'Pressed' state 'B' toggle button
        /// </summary>
        public bool UIBToggleButtonPressed = true;
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys7 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys8 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys9 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys10 = "{Left}";
        
        /// <summary>
        /// Set to 'Pressed' state 'I' toggle button
        /// </summary>
        public bool UIIToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'U' toggle button
        /// </summary>
        public bool UIUToggleButtonPressed = true;
        
        /// <summary>
        /// Select 'Microsoft Uighur' in 'cmbFontFamily' combo box
        /// </summary>
        public string UICmbFontFamilyComboBoxSelectedItem = "Microsoft Uighur";
        
        /// <summary>
        /// Select '22' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem = "22";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'TextPoint' window equals 'TextPoint'
        /// </summary>
        public string UITextPointWindowName = "TextPoint";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TextFormatting'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextFormattingParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'I love Pakistan' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "I love Pakistan";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys1 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys2 = "{Left}";
        
        /// <summary>
        /// Set to 'Pressed' state 'B' toggle button
        /// </summary>
        public bool UIBToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'I' toggle button
        /// </summary>
        public bool UIIToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'U' toggle button
        /// </summary>
        public bool UIUToggleButtonPressed = true;
        
        /// <summary>
        /// Select 'Microsoft YaHei' in 'cmbFontFamily' combo box
        /// </summary>
        public string UICmbFontFamilyComboBoxSelectedItem = "Microsoft YaHei";
        
        /// <summary>
        /// Select '24' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem = "24";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
        /// </summary>
        public string UITxtBoxEditControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
        /// </summary>
        public string UITxtBoxEditControlType1 = "Edit";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'txtBox' text box equals 'Edit'
        /// </summary>
        public string UITxtBoxEditControlType2 = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlayFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlayFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Please type' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "Please type";
        
        /// <summary>
        /// Type 'Please type whatever he is speaking.' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText1 = "Please type whatever he is speaking.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlayRepeat'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlayRepeatParams
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'txtBoxUserSec' text box
        /// </summary>
        public string UITxtBoxUserSecEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlayAddName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlayAddNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'Please type whatever he is speaking.(00:05) 
        ///This is second Line.'
        /// </summary>
        public string UITxtBoxEditText = "Please type whatever he is speaking.(00:05) \r\nThis is second Line.";
        
        /// <summary>
        /// Type 'Saad' in 'TextBox' text box
        /// </summary>
        public string UITextBoxEditText = "Saad";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TimeStampName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TimeStampNameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Dehmitris' in 'TextBox' text box
        /// </summary>
        public string UITextBoxEditText = "Dehmitris";
        
        /// <summary>
        /// Select 'Dehmitris' in 'comboBox_ListOfNames' combo box
        /// </summary>
        public string UIComboBox_ListOfNamesComboBoxSelectedItem = "Dehmitris";
        
        /// <summary>
        /// Select 'Timestamp with name' check box
        /// </summary>
        public bool UITimestampwithnameCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewFileTmeStampName'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewFileTmeStampNameParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'audio-sample-4' in 'listBox1' list box
        /// </summary>
        public string UIListBox1ListSelectedItemsAsString = "audio-sample-4";
        
        /// <summary>
        /// Select 'audio-sample-1' in 'listBox1' list box
        /// </summary>
        public string UIListBox1ListSelectedItemsAsString1 = "audio-sample-1";
        
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'Please type whatever he is speaking.(00:05) 
        ///This is second Line.(00:01)  Dehmitris: (00:01) 
        ///
        ///This another line'
        /// </summary>
        public string UITxtBoxEditText = "Please type whatever he is speaking.(00:05) \r\nThis is second Line.(00:01)  Dehmit" +
            "ris: (00:01) \r\n\r\nThis another line";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveFileParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'B' toggle button
        /// </summary>
        public bool UIBToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'I' toggle button
        /// </summary>
        public bool UIIToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'U' toggle button
        /// </summary>
        public bool UIUToggleButtonPressed = true;
        
        /// <summary>
        /// Select 'MingLiU' in 'cmbFontFamily' combo box
        /// </summary>
        public string UICmbFontFamilyComboBoxSelectedItem = "MingLiU";
        
        /// <summary>
        /// Select '24' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem = "24";
        
        /// <summary>
        /// Select 'testfile' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testfile";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CutPaste'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CutPasteParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This another line(00:24)  Dehmitris: 
        ///'
        /// </summary>
        public string UITxtBoxEditText = "This another line(00:24)  Dehmitris: \r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyPaste'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CopyPasteParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This another line(00:24)  Dehmitris: 
        ///Please type whatever he is speaking.(00:05) 
        ///This is second Line.(00:01)  Dehmitris: (00:01)
        ///'
        /// </summary>
        public string UITxtBoxEditText = "This another line(00:24)  Dehmitris: \r\nPlease type whatever he is speaking.(00:05" +
            ") \r\nThis is second Line.(00:01)  Dehmitris: (00:01)\r\n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlayBackRate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlayBackRateParams
    {
        
        #region Fields
        /// <summary>
        /// Set position '4' in 'trackBar_PlayBackRate' slider
        /// </summary>
        public string UITrackBar_PlayBackRatSliderPositionAsString = "4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FileOpenPlay'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileOpenPlayParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'I am typing test' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "I am typing test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenPlay'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenPlayParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'This is test 1' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "This is test 1";
        
        /// <summary>
        /// Set to 'Pressed' state 'B' toggle button
        /// </summary>
        public bool UIBToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'I' toggle button
        /// </summary>
        public bool UIIToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'U' toggle button
        /// </summary>
        public bool UIUToggleButtonPressed = true;
        
        /// <summary>
        /// Select '18' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem = "18";
        
        /// <summary>
        /// Select '22' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem1 = "22";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlayStopFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlayStopFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'This test sample' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "This test sample";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BoldItalicUnderline'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BoldItalicUnderlineParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'B' toggle button
        /// </summary>
        public bool UIBToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'I' toggle button
        /// </summary>
        public bool UIIToggleButtonPressed = true;
        
        /// <summary>
        /// Set to 'Pressed' state 'U' toggle button
        /// </summary>
        public bool UIUToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TmeStamp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TmeStampParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'This is second test ' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "This is second test ";
        
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This is second test (00:12) 
        ///this second line '
        /// </summary>
        public string UITxtBoxEditText1 = "This is second test (00:12) \r\nthis second line ";
        
        /// <summary>
        /// Type 'Saad' in 'TextBox' text box
        /// </summary>
        public string UITextBoxEditText = "Saad";
        
        /// <summary>
        /// Select 'Timestamp with name' check box
        /// </summary>
        public bool UITimestampwithnameCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FontSize'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FontSizeParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'this is another test
        ///'
        /// </summary>
        public string UITxtBoxEditText = "this is another test\r\n";
        
        /// <summary>
        /// Select 'Miriam' in 'cmbFontFamily' combo box
        /// </summary>
        public string UICmbFontFamilyComboBoxSelectedItem = "Miriam";
        
        /// <summary>
        /// Select '24' in 'cmbFontSize' combo box
        /// </summary>
        public string UICmbFontSizeComboBoxSelectedItem = "24";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PlaBackRateRepeat'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PlaBackRateRepeatParams
    {
        
        #region Fields
        /// <summary>
        /// Set position '1.97' in 'trackBar_PlayBackRate' slider
        /// </summary>
        public string UITrackBar_PlayBackRatSliderPositionAsString = "1.97";
        
        /// <summary>
        /// Type '5' in 'txtBoxUserSec' text box
        /// </summary>
        public string UITxtBoxUserSecEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CutCopyPaste'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CutCopyPasteParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This is new test of cut copy pate
        ///
        ///This is new test of cut copy pate'
        ///This is new test of cut copy pateThis is new test of cut copy pate'
        /// </summary>
        public string UITxtBoxEditText = "This is new test of cut copy pate\r\n\r\nThis is new test of cut copy pate\'\r\nThis is " +
            "new test of cut copy pateThis is new test of cut copy pate";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CopyPasteCut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CopyPasteCutParams
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This is cut copy paste test   This is cut copy paste test 
        ///
        ///This is cut copy paste test  This is cut copy paste test '
        /// </summary>
        public string UITxtBoxEditText = "This is cut copy paste test   This is cut copy paste test \r\n\r\nThis is cut copy pa" +
            "ste test  This is cut copy paste test ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This is cut copy paste test   This is cut copy paste test 
        ///
        ///This is cut copy paste test  This is cut copy paste test 
        ///'
        /// </summary>
        public string UITxtBoxEditText = "This is cut copy paste test   This is cut copy paste test \r\n\r\nThis is cut copy pa" +
            "ste test  This is cut copy paste test \r\n";
        
        /// <summary>
        /// Type the following paragraph in 'txtBox' text box 
        ///'This is cut copy paste test   This is cut copy paste test 
        ///
        ///This is cut copy paste test  This is cut copy paste test 
        ///This is cut copy paste test  This is cut copy paste test 
        ///'
        /// </summary>
        public string UITxtBoxEditText1 = "This is cut copy paste test   This is cut copy paste test \r\n\r\nThis is cut copy pa" +
            "ste test  This is cut copy paste test \r\nThis is cut copy paste test  This is cut" +
            " copy paste test \r\n";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys1 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys2 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys3 = "{Left}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'This is cut copy test' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText = "This is cut copy test";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys1 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys2 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys3 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys4 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys5 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys6 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Down}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys7 = "{Down}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys8 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys9 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys10 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys11 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys12 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys13 = "{Left}";
        
        /// <summary>
        /// Type 'This is cut copy     ' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText1 = "This is cut copy     ";
        
        /// <summary>
        /// Type 'This is cut copy      test   ' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText2 = "This is cut copy      test   ";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys14 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys15 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys16 = "{Left}";
        
        /// <summary>
        /// Type 'Shift + {Left}' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditSendKeys17 = "{Left}";
        
        /// <summary>
        /// Type 'This is cut copy      test                               ' in 'txtBox' text box
        /// </summary>
        public string UITxtBoxEditText3 = "This is cut copy      test                               ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITextPointWindow : WinWindow
    {
        
        public UITextPointWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TextPoint";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIPlayWindow UIPlayWindow
        {
            get
            {
                if ((this.mUIPlayWindow == null))
                {
                    this.mUIPlayWindow = new UIPlayWindow(this);
                }
                return this.mUIPlayWindow;
            }
        }
        
        public UIStopWindow UIStopWindow
        {
            get
            {
                if ((this.mUIStopWindow == null))
                {
                    this.mUIStopWindow = new UIStopWindow(this);
                }
                return this.mUIStopWindow;
            }
        }
        
        public UITimestampWindow UITimestampWindow
        {
            get
            {
                if ((this.mUITimestampWindow == null))
                {
                    this.mUITimestampWindow = new UITimestampWindow(this);
                }
                return this.mUITimestampWindow;
            }
        }
        
        public UITimestampwithnameWindow UITimestampwithnameWindow
        {
            get
            {
                if ((this.mUITimestampwithnameWindow == null))
                {
                    this.mUITimestampwithnameWindow = new UITimestampwithnameWindow(this);
                }
                return this.mUITimestampwithnameWindow;
            }
        }
        
        public UIElementHost1Window UIElementHost1Window
        {
            get
            {
                if ((this.mUIElementHost1Window == null))
                {
                    this.mUIElementHost1Window = new UIElementHost1Window(this);
                }
                return this.mUIElementHost1Window;
            }
        }
        
        public UIElementHost1Pane1 UIElementHost1Pane
        {
            get
            {
                if ((this.mUIElementHost1Pane == null))
                {
                    this.mUIElementHost1Pane = new UIElementHost1Pane1(this);
                }
                return this.mUIElementHost1Pane;
            }
        }
        
        public UIPauseWindow UIPauseWindow
        {
            get
            {
                if ((this.mUIPauseWindow == null))
                {
                    this.mUIPauseWindow = new UIPauseWindow(this);
                }
                return this.mUIPauseWindow;
            }
        }
        
        public UITxtBoxUserSecWindow UITxtBoxUserSecWindow
        {
            get
            {
                if ((this.mUITxtBoxUserSecWindow == null))
                {
                    this.mUITxtBoxUserSecWindow = new UITxtBoxUserSecWindow(this);
                }
                return this.mUITxtBoxUserSecWindow;
            }
        }
        
        public UIRepeatWindow UIRepeatWindow
        {
            get
            {
                if ((this.mUIRepeatWindow == null))
                {
                    this.mUIRepeatWindow = new UIRepeatWindow(this);
                }
                return this.mUIRepeatWindow;
            }
        }
        
        public UIAddLabelWindow UIAddLabelWindow
        {
            get
            {
                if ((this.mUIAddLabelWindow == null))
                {
                    this.mUIAddLabelWindow = new UIAddLabelWindow(this);
                }
                return this.mUIAddLabelWindow;
            }
        }
        
        public UIComboBox_ListOfNamesWindow UIComboBox_ListOfNamesWindow
        {
            get
            {
                if ((this.mUIComboBox_ListOfNamesWindow == null))
                {
                    this.mUIComboBox_ListOfNamesWindow = new UIComboBox_ListOfNamesWindow(this);
                }
                return this.mUIComboBox_ListOfNamesWindow;
            }
        }
        
        public UIListBox1Window UIListBox1Window
        {
            get
            {
                if ((this.mUIListBox1Window == null))
                {
                    this.mUIListBox1Window = new UIListBox1Window(this);
                }
                return this.mUIListBox1Window;
            }
        }
        
        public UIFileWindow UIFileWindow
        {
            get
            {
                if ((this.mUIFileWindow == null))
                {
                    this.mUIFileWindow = new UIFileWindow(this);
                }
                return this.mUIFileWindow;
            }
        }
        
        public UITrackBar_PlayBackRatWindow UITrackBar_PlayBackRatWindow
        {
            get
            {
                if ((this.mUITrackBar_PlayBackRatWindow == null))
                {
                    this.mUITrackBar_PlayBackRatWindow = new UITrackBar_PlayBackRatWindow(this);
                }
                return this.mUITrackBar_PlayBackRatWindow;
            }
        }
        
        public WinClient UITextPointClient
        {
            get
            {
                if ((this.mUITextPointClient == null))
                {
                    this.mUITextPointClient = new WinClient(this);
                    #region Search Criteria
                    this.mUITextPointClient.SearchProperties[WinControl.PropertyNames.Name] = "TextPoint";
                    this.mUITextPointClient.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITextPointClient;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIPlayWindow mUIPlayWindow;
        
        private UIStopWindow mUIStopWindow;
        
        private UITimestampWindow mUITimestampWindow;
        
        private UITimestampwithnameWindow mUITimestampwithnameWindow;
        
        private UIElementHost1Window mUIElementHost1Window;
        
        private UIElementHost1Pane1 mUIElementHost1Pane;
        
        private UIPauseWindow mUIPauseWindow;
        
        private UITxtBoxUserSecWindow mUITxtBoxUserSecWindow;
        
        private UIRepeatWindow mUIRepeatWindow;
        
        private UIAddLabelWindow mUIAddLabelWindow;
        
        private UIComboBox_ListOfNamesWindow mUIComboBox_ListOfNamesWindow;
        
        private UIListBox1Window mUIListBox1Window;
        
        private UIFileWindow mUIFileWindow;
        
        private UITrackBar_PlayBackRatWindow mUITrackBar_PlayBackRatWindow;
        
        private WinClient mUITextPointClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "File";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIToolsMenuItem UIToolsMenuItem
        {
            get
            {
                if ((this.mUIToolsMenuItem == null))
                {
                    this.mUIToolsMenuItem = new UIToolsMenuItem(this);
                }
                return this.mUIToolsMenuItem;
            }
        }
        
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIToolsMenuItem mUIToolsMenuItem;
        
        private UIEditMenuItem mUIEditMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIToolsMenuItem : WinMenuItem
    {
        
        public UIToolsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Tools";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIPredefinedlistMenuItem UIPredefinedlistMenuItem
        {
            get
            {
                if ((this.mUIPredefinedlistMenuItem == null))
                {
                    this.mUIPredefinedlistMenuItem = new UIPredefinedlistMenuItem(this);
                }
                return this.mUIPredefinedlistMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPredefinedlistMenuItem mUIPredefinedlistMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPredefinedlistMenuItem : WinMenuItem
    {
        
        public UIPredefinedlistMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Predefined list";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAddNameMenuItem
        {
            get
            {
                if ((this.mUIAddNameMenuItem == null))
                {
                    this.mUIAddNameMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAddNameMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Add Name";
                    this.mUIAddNameMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAddNameMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIAddNameMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAddNameMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICutCtrlXMenuItem
        {
            get
            {
                if ((this.mUICutCtrlXMenuItem == null))
                {
                    this.mUICutCtrlXMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICutCtrlXMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Cut         (Ctrl + X)";
                    this.mUICutCtrlXMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICutCtrlXMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICutCtrlXMenuItem;
            }
        }
        
        public WinMenuItem UIPasteCtrlVMenuItem
        {
            get
            {
                if ((this.mUIPasteCtrlVMenuItem == null))
                {
                    this.mUIPasteCtrlVMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPasteCtrlVMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Paste      (Ctrl + V)";
                    this.mUIPasteCtrlVMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPasteCtrlVMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIPasteCtrlVMenuItem;
            }
        }
        
        public WinMenuItem UICopyCtrlCMenuItem
        {
            get
            {
                if ((this.mUICopyCtrlCMenuItem == null))
                {
                    this.mUICopyCtrlCMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICopyCtrlCMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Copy      (Ctrl + C)";
                    this.mUICopyCtrlCMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICopyCtrlCMenuItem.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICopyCtrlCMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICutCtrlXMenuItem;
        
        private WinMenuItem mUIPasteCtrlVMenuItem;
        
        private WinMenuItem mUICopyCtrlCMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPlayWindow : WinWindow
    {
        
        public UIPlayWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPlay";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UIPlayButton
        {
            get
            {
                if ((this.mUIPlayButton == null))
                {
                    this.mUIPlayButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPlayButton.SearchProperties[WinButton.PropertyNames.Name] = "Play";
                    this.mUIPlayButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIPlayButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPlayButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStopWindow : WinWindow
    {
        
        public UIStopWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnStop";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UIStopButton
        {
            get
            {
                if ((this.mUIStopButton == null))
                {
                    this.mUIStopButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStopButton.SearchProperties[WinButton.PropertyNames.Name] = "Stop";
                    this.mUIStopButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIStopButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStopButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITimestampWindow : WinWindow
    {
        
        public UITimestampWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnTimeStamp";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UITimestampButton
        {
            get
            {
                if ((this.mUITimestampButton == null))
                {
                    this.mUITimestampButton = new WinButton(this);
                    #region Search Criteria
                    this.mUITimestampButton.SearchProperties[WinButton.PropertyNames.Name] = "Timestamp";
                    this.mUITimestampButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITimestampButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUITimestampButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITimestampwithnameWindow : WinWindow
    {
        
        public UITimestampwithnameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "checkBox_WithName";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UITimestampwithnameCheckBox
        {
            get
            {
                if ((this.mUITimestampwithnameCheckBox == null))
                {
                    this.mUITimestampwithnameCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUITimestampwithnameCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Timestamp with name";
                    this.mUITimestampwithnameCheckBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITimestampwithnameCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUITimestampwithnameCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIElementHost1Window : WinWindow
    {
        
        public UIElementHost1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "elementHost1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIElementHost1Client UIElementHost1Client
        {
            get
            {
                if ((this.mUIElementHost1Client == null))
                {
                    this.mUIElementHost1Client = new UIElementHost1Client(this);
                }
                return this.mUIElementHost1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIElementHost1Client mUIElementHost1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIElementHost1Client : WinClient
    {
        
        public UIElementHost1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "elementHost1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIElementHost1Pane UIElementHost1Pane
        {
            get
            {
                if ((this.mUIElementHost1Pane == null))
                {
                    this.mUIElementHost1Pane = new UIElementHost1Pane(this);
                }
                return this.mUIElementHost1Pane;
            }
        }
        #endregion
        
        #region Fields
        private UIElementHost1Pane mUIElementHost1Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIElementHost1Pane : WpfPane
    {
        
        public UIElementHost1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.Name] = "elementHost1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EnhanchedTextBox";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITxtBoxEdit
        {
            get
            {
                if ((this.mUITxtBoxEdit == null))
                {
                    this.mUITxtBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBox";
                    this.mUITxtBoxEdit.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITxtBoxEdit;
            }
        }
        
        public UIMainToolBarToolBar UIMainToolBarToolBar
        {
            get
            {
                if ((this.mUIMainToolBarToolBar == null))
                {
                    this.mUIMainToolBarToolBar = new UIMainToolBarToolBar(this);
                }
                return this.mUIMainToolBarToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITxtBoxEdit;
        
        private UIMainToolBarToolBar mUIMainToolBarToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainToolBarToolBar : WpfToolBar
    {
        
        public UIMainToolBarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfToolBar.PropertyNames.AutomationId] = "mainToolBar";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton UIBToggleButton
        {
            get
            {
                if ((this.mUIBToggleButton == null))
                {
                    this.mUIBToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIBToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "btnBold";
                    this.mUIBToggleButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIBToggleButton;
            }
        }
        
        public WpfToggleButton UIIToggleButton
        {
            get
            {
                if ((this.mUIIToggleButton == null))
                {
                    this.mUIIToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIIToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "btnItalic";
                    this.mUIIToggleButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIIToggleButton;
            }
        }
        
        public WpfToggleButton UIUToggleButton
        {
            get
            {
                if ((this.mUIUToggleButton == null))
                {
                    this.mUIUToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIUToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "btnUnderline";
                    this.mUIUToggleButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIUToggleButton;
            }
        }
        
        public WpfComboBox UICmbFontFamilyComboBox
        {
            get
            {
                if ((this.mUICmbFontFamilyComboBox == null))
                {
                    this.mUICmbFontFamilyComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICmbFontFamilyComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cmbFontFamily";
                    this.mUICmbFontFamilyComboBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICmbFontFamilyComboBox;
            }
        }
        
        public WpfComboBox UICmbFontSizeComboBox
        {
            get
            {
                if ((this.mUICmbFontSizeComboBox == null))
                {
                    this.mUICmbFontSizeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICmbFontSizeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cmbFontSize";
                    this.mUICmbFontSizeComboBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICmbFontSizeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mUIBToggleButton;
        
        private WpfToggleButton mUIIToggleButton;
        
        private WpfToggleButton mUIUToggleButton;
        
        private WpfComboBox mUICmbFontFamilyComboBox;
        
        private WpfComboBox mUICmbFontSizeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIElementHost1Pane1 : WpfPane
    {
        
        public UIElementHost1Pane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.Name] = "elementHost1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public UIItemCustom1 UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom1(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom1 mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EnhanchedTextBox";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITxtBoxEdit
        {
            get
            {
                if ((this.mUITxtBoxEdit == null))
                {
                    this.mUITxtBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBox";
                    this.mUITxtBoxEdit.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITxtBoxEdit;
            }
        }
        
        public UIMainToolBarToolBar1 UIMainToolBarToolBar
        {
            get
            {
                if ((this.mUIMainToolBarToolBar == null))
                {
                    this.mUIMainToolBarToolBar = new UIMainToolBarToolBar1(this);
                }
                return this.mUIMainToolBarToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITxtBoxEdit;
        
        private UIMainToolBarToolBar1 mUIMainToolBarToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainToolBarToolBar1 : WpfToolBar
    {
        
        public UIMainToolBarToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfToolBar.PropertyNames.AutomationId] = "mainToolBar";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UICmbFontFamilyComboBox
        {
            get
            {
                if ((this.mUICmbFontFamilyComboBox == null))
                {
                    this.mUICmbFontFamilyComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICmbFontFamilyComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cmbFontFamily";
                    this.mUICmbFontFamilyComboBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICmbFontFamilyComboBox;
            }
        }
        
        public WpfComboBox UICmbFontSizeComboBox
        {
            get
            {
                if ((this.mUICmbFontSizeComboBox == null))
                {
                    this.mUICmbFontSizeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICmbFontSizeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "cmbFontSize";
                    this.mUICmbFontSizeComboBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUICmbFontSizeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUICmbFontFamilyComboBox;
        
        private WpfComboBox mUICmbFontSizeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPauseWindow : WinWindow
    {
        
        public UIPauseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnPause";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UIPauseButton
        {
            get
            {
                if ((this.mUIPauseButton == null))
                {
                    this.mUIPauseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPauseButton.SearchProperties[WinButton.PropertyNames.Name] = "Pause";
                    this.mUIPauseButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIPauseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPauseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITxtBoxUserSecWindow : WinWindow
    {
        
        public UITxtBoxUserSecWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBoxUserSec";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtBoxUserSecEdit
        {
            get
            {
                if ((this.mUITxtBoxUserSecEdit == null))
                {
                    this.mUITxtBoxUserSecEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtBoxUserSecEdit.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITxtBoxUserSecEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtBoxUserSecEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRepeatWindow : WinWindow
    {
        
        public UIRepeatWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnRepeat";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UIRepeatButton
        {
            get
            {
                if ((this.mUIRepeatButton == null))
                {
                    this.mUIRepeatButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRepeatButton.SearchProperties[WinButton.PropertyNames.Name] = "Repeat";
                    this.mUIRepeatButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIRepeatButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRepeatButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddLabelWindow : WinWindow
    {
        
        public UIAddLabelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCreateLabel";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddLabelButton
        {
            get
            {
                if ((this.mUIAddLabelButton == null))
                {
                    this.mUIAddLabelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddLabelButton.SearchProperties[WinButton.PropertyNames.Name] = "Add Label";
                    this.mUIAddLabelButton.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIAddLabelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddLabelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComboBox_ListOfNamesWindow : WinWindow
    {
        
        public UIComboBox_ListOfNamesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBox_ListOfNames";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBox_ListOfNamesComboBox
        {
            get
            {
                if ((this.mUIComboBox_ListOfNamesComboBox == null))
                {
                    this.mUIComboBox_ListOfNamesComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBox_ListOfNamesComboBox.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIComboBox_ListOfNamesComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBox_ListOfNamesComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIListBox1Window : WinWindow
    {
        
        public UIListBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBox1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinList UIListBox1List
        {
            get
            {
                if ((this.mUIListBox1List == null))
                {
                    this.mUIListBox1List = new WinList(this);
                    #region Search Criteria
                    this.mUIListBox1List.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIListBox1List;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListBox1List;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileWindow : WinWindow
    {
        
        public UIFileWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "File";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITrackBar_PlayBackRatWindow : WinWindow
    {
        
        public UITrackBar_PlayBackRatWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "trackBar_PlayBackRate";
            this.WindowTitles.Add("TextPoint");
            #endregion
        }
        
        #region Properties
        public WinSlider UITrackBar_PlayBackRatSlider
        {
            get
            {
                if ((this.mUITrackBar_PlayBackRatSlider == null))
                {
                    this.mUITrackBar_PlayBackRatSlider = new WinSlider(this);
                    #region Search Criteria
                    this.mUITrackBar_PlayBackRatSlider.WindowTitles.Add("TextPoint");
                    #endregion
                }
                return this.mUITrackBar_PlayBackRatSlider;
            }
        }
        #endregion
        
        #region Fields
        private WinSlider mUITrackBar_PlayBackRatSlider;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIAudiosample1mp3ListItem UIAudiosample1mp3ListItem
        {
            get
            {
                if ((this.mUIAudiosample1mp3ListItem == null))
                {
                    this.mUIAudiosample1mp3ListItem = new UIAudiosample1mp3ListItem(this);
                }
                return this.mUIAudiosample1mp3ListItem;
            }
        }
        
        public UIAudiosample4mp3ListItem UIAudiosample4mp3ListItem
        {
            get
            {
                if ((this.mUIAudiosample4mp3ListItem == null))
                {
                    this.mUIAudiosample4mp3ListItem = new UIAudiosample4mp3ListItem(this);
                }
                return this.mUIAudiosample4mp3ListItem;
            }
        }
        
        public UITestfilertfListItem UITestfilertfListItem
        {
            get
            {
                if ((this.mUITestfilertfListItem == null))
                {
                    this.mUITestfilertfListItem = new UITestfilertfListItem(this);
                }
                return this.mUITestfilertfListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAudiosample1mp3ListItem mUIAudiosample1mp3ListItem;
        
        private UIAudiosample4mp3ListItem mUIAudiosample4mp3ListItem;
        
        private UITestfilertfListItem mUITestfilertfListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAudiosample1mp3ListItem : WinListItem
    {
        
        public UIAudiosample1mp3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "audio-sample-1.mp3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAudiosample4mp3ListItem : WinListItem
    {
        
        public UIAudiosample4mp3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "audio-sample-4.mp3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestfilertfListItem : WinListItem
    {
        
        public UITestfilertfListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testfile.rtf";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddnewnameWindow : WinWindow
    {
        
        public UIAddnewnameWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add new name";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add new name");
            #endregion
        }
        
        #region Properties
        public UITextBoxWindow UITextBoxWindow
        {
            get
            {
                if ((this.mUITextBoxWindow == null))
                {
                    this.mUITextBoxWindow = new UITextBoxWindow(this);
                }
                return this.mUITextBoxWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITextBoxWindow mUITextBoxWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITextBoxWindow : WinWindow
    {
        
        public UITextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TextBox";
            this.WindowTitles.Add("Add new name");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxEdit
        {
            get
            {
                if ((this.mUITextBoxEdit == null))
                {
                    this.mUITextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxEdit.WindowTitles.Add("Add new name");
                    #endregion
                }
                return this.mUITextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "OKButton";
            this.WindowTitles.Add("Add new name");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Add new name");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITrayInputIndicatorWindow : WinWindow
    {
        
        public UITrayInputIndicatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tray Input Indicator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TrayInputIndicatorWClass";
            this.WindowTitles.Add("Tray Input Indicator");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "101";
            this.WindowTitles.Add("Tray Input Indicator");
            #endregion
        }
        
        #region Properties
        public WinButton UISWEButton
        {
            get
            {
                if ((this.mUISWEButton == null))
                {
                    this.mUISWEButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISWEButton.SearchProperties[WinButton.PropertyNames.Name] = "SWE";
                    this.mUISWEButton.WindowTitles.Add("Tray Input Indicator");
                    #endregion
                }
                return this.mUISWEButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISWEButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIEnglishUnitedKingdomButton UIEnglishUnitedKingdomButton
        {
            get
            {
                if ((this.mUIEnglishUnitedKingdomButton == null))
                {
                    this.mUIEnglishUnitedKingdomButton = new UIEnglishUnitedKingdomButton(this);
                }
                return this.mUIEnglishUnitedKingdomButton;
            }
        }
        #endregion
        
        #region Fields
        private UIEnglishUnitedKingdomButton mUIEnglishUnitedKingdomButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnglishUnitedKingdomButton : WinButton
    {
        
        public UIEnglishUnitedKingdomButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "English (United Kingdom) - United Kingdom keyboard";
            #endregion
        }
        
        #region Properties
        public WinText UIUnitedKingdomkeyboarText
        {
            get
            {
                if ((this.mUIUnitedKingdomkeyboarText == null))
                {
                    this.mUIUnitedKingdomkeyboarText = new WinText(this);
                    #region Search Criteria
                    this.mUIUnitedKingdomkeyboarText.SearchProperties[WinText.PropertyNames.Name] = "United Kingdom keyboard";
                    #endregion
                }
                return this.mUIUnitedKingdomkeyboarText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIUnitedKingdomkeyboarText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow3 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITestfilertfListItem1 UITestfilertfListItem
        {
            get
            {
                if ((this.mUITestfilertfListItem == null))
                {
                    this.mUITestfilertfListItem = new UITestfilertfListItem1(this);
                }
                return this.mUITestfilertfListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestfilertfListItem1 mUITestfilertfListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestfilertfListItem1 : WinListItem
    {
        
        public UITestfilertfListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testfile.rtf";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Stop (F5)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.tooltips_class32", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinControl UIStopF5HelpBalloon
        {
            get
            {
                if ((this.mUIStopF5HelpBalloon == null))
                {
                    this.mUIStopF5HelpBalloon = new WinControl(this);
                    #region Search Criteria
                    this.mUIStopF5HelpBalloon.SearchProperties[UITestControl.PropertyNames.Name] = "Stop (F5)";
                    this.mUIStopF5HelpBalloon.SearchProperties[UITestControl.PropertyNames.ControlType] = "HelpBalloon";
                    #endregion
                }
                return this.mUIStopF5HelpBalloon;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIStopF5HelpBalloon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfListItem UIMingLiUListItem
        {
            get
            {
                if ((this.mUIMingLiUListItem == null))
                {
                    this.mUIMingLiUListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIMingLiUListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "MingLiU";
                    #endregion
                }
                return this.mUIMingLiUListItem;
            }
        }
        
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIMingLiUListItem;
        
        private UIItemMenu mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIPasteMenuItem
        {
            get
            {
                if ((this.mUIPasteMenuItem == null))
                {
                    this.mUIPasteMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIPasteMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Paste";
                    #endregion
                }
                return this.mUIPasteMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIPasteMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWI1514533ovRLChase7JWindow : WinWindow
    {
        
        public UIWI1514533ovRLChase7JWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "WI 151/4 (53.3 ov, RL Chase 7*, J Blackwood 32*, Yasir Shah 2/46) | Live Scorecar" +
                "d | ESPN Cricinfo - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("WI 151/4 (53.3 ov, RL Chase 7*, J Blackwood 32*, Yasir Shah 2/46) | Live Scorecar" +
                    "d | ESPN Cricinfo - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIChromeLegacyWindowWindow UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChromeLegacyWindowWindow mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChromeLegacyWindowWindow : WinWindow
    {
        
        public UIChromeLegacyWindowWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "644777304";
            this.WindowTitles.Add("WI 151/4 (53.3 ov, RL Chase 7*, J Blackwood 32*, Yasir Shah 2/46) | Live Scorecar" +
                    "d | ESPN Cricinfo - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIChromeLegacyWindowDocument
        {
            get
            {
                if ((this.mUIChromeLegacyWindowDocument == null))
                {
                    this.mUIChromeLegacyWindowDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIChromeLegacyWindowDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIChromeLegacyWindowDocument.WindowTitles.Add("WI 151/4 (53.3 ov, RL Chase 7*, J Blackwood 32*, Yasir Shah 2/46) | Live Scorecar" +
                            "d | ESPN Cricinfo - Google Chrome");
                    #endregion
                }
                return this.mUIChromeLegacyWindowDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIChromeLegacyWindowDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Play (F2)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.tooltips_class32", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinControl UIPlayF2HelpBalloon
        {
            get
            {
                if ((this.mUIPlayF2HelpBalloon == null))
                {
                    this.mUIPlayF2HelpBalloon = new WinControl(this);
                    #region Search Criteria
                    this.mUIPlayF2HelpBalloon.SearchProperties[UITestControl.PropertyNames.Name] = "Play (F2)";
                    this.mUIPlayF2HelpBalloon.SearchProperties[UITestControl.PropertyNames.ControlType] = "HelpBalloon";
                    #endregion
                }
                return this.mUIPlayF2HelpBalloon;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIPlayF2HelpBalloon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYahooGoogleChromeWindow : WinWindow
    {
        
        public UIYahooGoogleChromeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Yahoo - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("Yahoo - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIChromeLegacyWindowWindow1 UIChromeLegacyWindowWindow
        {
            get
            {
                if ((this.mUIChromeLegacyWindowWindow == null))
                {
                    this.mUIChromeLegacyWindowWindow = new UIChromeLegacyWindowWindow1(this);
                }
                return this.mUIChromeLegacyWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIChromeLegacyWindowWindow1 mUIChromeLegacyWindowWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIChromeLegacyWindowWindow1 : WinWindow
    {
        
        public UIChromeLegacyWindowWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "341644944";
            this.WindowTitles.Add("Yahoo - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinClient UIChromeLegacyWindowClient
        {
            get
            {
                if ((this.mUIChromeLegacyWindowClient == null))
                {
                    this.mUIChromeLegacyWindowClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIChromeLegacyWindowClient.SearchProperties[WinControl.PropertyNames.Name] = "Chrome Legacy Window";
                    this.mUIChromeLegacyWindowClient.WindowTitles.Add("Yahoo - Google Chrome");
                    #endregion
                }
                return this.mUIChromeLegacyWindowClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIChromeLegacyWindowClient;
        #endregion
    }
}
